pipeline {
    agent any  // Este mantiene el nodo predeterminado para etapas generales

    environment {
        bucketName = "todo-list-aws-bucket-${UUID.randomUUID().toString()}"
    }

    stages {
        stage('Get Code') {
            agent { label 'agente1' }  // Usa 'agente1' para esta etapa
            steps {
                echo 'Clonando el repositorio...'
                // Mostrar quién es el usuario y en qué host está corriendo el pipeline
                sh 'echo "Usuario: $(whoami), Host: $(hostname)"'
                git branch: 'develop', url: 'https://github.com/CarballoFrancisco/todo-list-aws.git'
            }
        }

        stage('Static Test') {
            agent { label 'agente1' }  // Usa 'agente1' para las pruebas estáticas
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    script {
                        echo 'Running Static Analysis with Flake8 and Bandit...'

                        // Mostrar quién es el usuario y en qué host está corriendo el pipeline
                        sh 'echo "Usuario: $(whoami), Host: $(hostname)"'
                        
                        // Ejecutar Flake8
                        sh 'flake8 --exit-zero --format=pylint src >flake8.out'
                        sh 'cat flake8.out'
                        recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')]

                        // Crear y activar entorno virtual, luego instalar Bandit
                        sh 'python3 -m venv venv'
                        sh '. venv/bin/activate && pip install bandit'  // Usar '.' en lugar de 'source' para activar el entorno virtual

                        // Ejecutar Bandit
                        sh '. venv/bin/activate && bandit -r src -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}]: {msg}"'
                        sh 'cat bandit.out'
                        recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')]  // Graba los problemas de Bandit
                    }
                }
            }
        }

        stage('Build & Validate') {
            agent { label 'agente2' }  // Usa 'agente2' para la construcción y validación
            steps {
                echo 'Construyendo y validando la aplicación SAM...'
                // Mostrar quién es el usuario y en qué host está corriendo el pipeline
                sh 'echo "Usuario: $(whoami), Host: $(hostname)"'
                sh 'sam build'
                sh 'sam validate'
            }
        }

        stage('Deploy SAM') {
            agent { label 'agente1' }  // Usa 'agente1' para el despliegue SAM
            steps {
                echo 'Desplegando la aplicación SAM...'
                // Mostrar quién es el usuario y en qué host está corriendo el pipeline
                sh 'echo "Usuario: $(whoami), Host: $(hostname)"'
                sh 'aws cloudformation delete-stack --stack-name todo-list-stack --region us-east-1'
                sh 'aws cloudformation wait stack-delete-complete --stack-name todo-list-stack --region us-east-1'
                sh "aws s3api create-bucket --bucket ${bucketName} --region us-east-1"

                sh """
                    sam deploy --no-confirm-changeset \
                    --stack-name todo-list-stack \
                    --capabilities CAPABILITY_IAM \
                    --region us-east-1 \
                    --s3-bucket ${bucketName} \
                    --no-fail-on-empty-changeset \
                    --parameter-overrides Stage=staging
                """

                // Guardar la URL en un archivo
                script {
                    def baseUrl = sh(script: 'aws cloudformation describe-stacks --stack-name todo-list-stack --region us-east-1 --query "Stacks[0].Outputs[?OutputKey==\'BaseUrlApi\'].OutputValue" --output text', returnStdout: true).trim()
                    writeFile file: 'api_url.txt', text: baseUrl
                }

                // Stash el archivo con la URL para usarlo en otra etapa
                stash name: 'api_url', includes: 'api_url.txt'
            }
        }

        stage('REST API Integration Tests') {
            agent { label 'agente3' }  // Usa 'agente3' para las pruebas de la API Rest
            steps {
                script {
                    echo 'Running REST API integration tests using curl...'
                    // Mostrar quién es el usuario y en qué host está corriendo el pipeline
                    sh 'echo "Usuario: $(whoami), Host: $(hostname)"'

                    // Recuperar el archivo con la URL desde el stash
                    unstash 'api_url'

                    // Leer la URL del archivo
                    def baseUrl = readFile('api_url.txt').trim()
                    def apiUrl = "${baseUrl}/todos"

                    // GET todos
                    def responseCode = sh(script: "curl -s -o /dev/null -w '%{http_code}' -X GET ${apiUrl}", returnStdout: true).trim()
                    if (responseCode == '200') {
                        echo "La API responde correctamente."
                    } else {
                        error "Error al acceder a la API. Código de estado: ${responseCode}"
                    }

                    // POST todos
                    def postData = '{"text": "Test task", "userId": "12345"}'
                    def postResponse = sh(script: """
                        curl -s -X POST ${apiUrl} \
                        -H "Content-Type: application/json" \
                        -d '${postData}' \
                        -w "%{http_code}" -o post_response.json
                    """, returnStdout: true).trim()

                    echo "POST Response Code: ${postResponse}"
                    def postResponseBody = readFile('post_response.json')
                    echo "POST Response Body: ${postResponseBody}"

                    if (postResponse != '200') {
                        error "POST request failed! Expected 200, got ${postResponse}"
                    }

                    // Extraer el ID del TODO creado
                    def todoId = sh(script: "jq -r '.body | fromjson | .id' post_response.json", returnStdout: true).trim()
                    echo "Nuevo TODO creado con ID: ${todoId}"

                    // GET todos/{id}
                    def getTodoResponse = sh(script: "curl -s -o /dev/null -w '%{http_code}' -X GET ${apiUrl}/${todoId}", returnStdout: true).trim()
                    if (getTodoResponse == '200') {
                        echo "GET TODO con ID ${todoId} fue exitoso."
                    } else {
                        error "Error al obtener el TODO con ID ${todoId}. Código de estado: ${getTodoResponse}"
                    }

                    // PUT todos/{id} (actualizar antes de eliminar)
                    def putData = '{"text": "Updated task", "userId": "12345", "checked": true}'
                    def putResponse = sh(script: """
                        curl -s -X PUT ${apiUrl}/${todoId} \
                        -H "Content-Type: application/json" \
                        -d '${putData}' \
                        -w "%{http_code}" -o put_response.json
                    """, returnStdout: true).trim()

                    echo "PUT Response Code: ${putResponse}"
                    if (putResponse != '200') {
                        error "PUT request failed! Expected 200, got ${putResponse}"
                    }

                    // DELETE todos/{id}
                    def deleteResponseCode = sh(script: "curl -s -o /dev/null -w '%{http_code}' -X DELETE ${apiUrl}/${todoId}", returnStdout: true).trim()

                    if (deleteResponseCode == '200') {
                        echo "El TODO con ID ${todoId} fue eliminado correctamente."
                    } else {
                        error "Error al eliminar el TODO. Código de estado: ${deleteResponseCode}"
                    }
                }
            }
        }

        stage('Promote to Master') {
            agent { label 'agente2' }  // Usa 'agente2' para la etapa de promoción
            steps {
                script {
                    echo 'Promoting the code to master...'
                    withCredentials([usernamePassword(credentialsId: 'GitHub-Token-Jenkins', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config --global credential.helper store
                            git config --global user.name "$GITHUB_USER"
                            git config --global user.email "$GITHUB_USER@users.noreply.github.com"

                            git checkout master
                            git pull origin master
                            git merge develop --no-ff -m "Promoting version to production"
                            git push https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/CarballoFrancisco/todo-list-aws.git master
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completada con éxito!'
        }
        failure {
            echo 'La ejecución de la pipeline ha fallado.'
        }
    }
}
